{"version":3,"sources":["elements/Header/index.tsx","rules/curlverter.core.ts","rules/restassured.rule.ts","rules/karate.rule.ts","elements/MyForm/index.tsx","pages/Home/index.tsx","App.tsx","index.tsx","elements/Header/styles.module.css"],"names":["Header","AppBar","position","Toolbar","Typography","variant","className","styles","title","Component","CurlverterCore","curl","url","method","body","headers","this","converter","includes","split","forEach","value","headerValues","push","name","bodySplited","createUrl","requestSplited","urlSplited","URL","RestAssuredRule","curlProperties","mountHeaders","mountBody","mountQueryParams","mountUrl","queryParamsRestAssured","queryParams","searchParams","params","toString","param","paramSplited","substring","indexOf","headerSnippet","element","trim","KarateRule","mountHeader","mountMethod","givenUrl","andRequest","andHeader","MyForm","props","state","frameworks","curlCommand","snippet","language","handleSubmit","bind","setSubmitting","restassuredRule","setState","mountSnippet","karateRule","alert","error","Container","maxWidth","initialValues","onSubmit","errors","touched","isValidating","Box","margin","FormControl","fullWidth","InputLabel","shrink","htmlFor","component","Select","type","inputProps","id","validate","frameworksFieldValidation","MenuItem","TextField","label","multiline","rows","placeholder","curlFieldValidation","Button","color","showLineNumbers","style","atomDark","text","startIcon","FileCopyOutlined","Home","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6f9eb79a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport styles from './styles.module.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar >\n                    <Typography variant=\"h4\" className={styles.title}>\n                        cURL to Anything\n                    </Typography>\n                </Toolbar>\n          </AppBar>\n        )\n    }\n}\n\nexport default Header;","/**\n * Implements the main features to generate snippets for each language\n */\n\nexport default class CurlverterCore {\n\n    curl: string;\n    url?: URL;\n    method?: string;\n    body: string\n    headers: {name: string, value: string }[]\n\n    constructor(curl: string) {\n        this.curl = curl;\n        this.headers = [];\n        this.body = \"\";\n        this.converter()\n    }\n\n    converter() {\n        if (this.curl.includes(\"--\")) {\n            let curlSplited = this.curl.split(\"--\");\n            curlSplited.forEach( (value) => {\n                if (value.includes(\"header\")) {\n                    let header = value.split(\"'\");\n                    let headerValues: string[] = header[1].split(\":\");\n                    this.headers.push({name: headerValues[0], value: headerValues[1]})\n                }\n                if (value.includes(\"data-raw\")) {\n                    let bodySplited = value.split(\"'\");\n                    this.body = bodySplited[1];\n                }\n                if (value.includes(\"request\")) {\n                    this.createUrl(value)\n                }\n            })\n        } else {\n            let curlSplited = this.curl.split(\" -\");\n            curlSplited.forEach( (value) => {\n                if (value.includes(\"H\")) {\n                    let header = value.split(\"\\\"\");\n                    let headerValues: string[] = header[1].split(\":\");\n                    this.headers.push({name: headerValues[0], value: headerValues[1]})\n                }\n                if (value.includes(\"d\")) {\n                    let bodySplited = value.split(\" \\\"\");\n                    this.body = bodySplited[1];\n                }\n                if (value.includes(\"X\")) {\n                    this.createUrl(value)\n                }\n            })\n        }\n        \n    }\n\n    createUrl(value: String) {\n        let requestSplited = value.split(\" \");\n        this.method = requestSplited[1];\n        let urlSplited = requestSplited[2].split(\"'\")\n        this.url = new URL(urlSplited[1]);\n    }\n}","import CurlverterCore from './curlverter.core'\n\nexport default class RestAssuredRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `given()${this.mountHeaders()}${this.mountBody()}\\n${this.mountQueryParams()}.when()${this.mountUrl()}\\n.then()`\n    }\n\n    mountQueryParams() {\n        let queryParamsRestAssured = \"\";\n        let queryParams = this.curlProperties.url?.searchParams;\n        let params = queryParams?.toString().split(\"&\")\n        params?.forEach(param => {\n            let paramSplited = param.split(\"=\");\n            queryParamsRestAssured += `.queryParam(\"${paramSplited[0]}\", \"${paramSplited[1]}\")\\n`\n        });\n        return queryParamsRestAssured;\n    }\n\n    mountUrl() {\n        let method: string = \"\"\n        let url = this.curlProperties.url?.toString().substring(0, this.curlProperties.url.toString().indexOf(\"?\"))\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `.get(\"${url}\")`;\n                break;\n            case \"POST\": \n                method = `.post(\"${url}\")`;\n                break;\n            case \"PUT\": \n                method = `.put(\"${url}\")`;\n                break;\n            case \"DELETE\": \n                method = `.delete(\"${url}\")`;\n                break;\n        }\n        return \"\\n\" + method;\n    }\n\n    mountHeaders() {\n        let headerSnippet: string = \"\";\n        this.curlProperties.headers.forEach( element  => {\n            headerSnippet += `\\n.header(\"${element.name.trim()}\", \"${element.value.trim()}\")`\n        })\n        return headerSnippet;\n    }\n\n    mountBody() {\n        let body: string = \"\"\n        if (typeof this.curlProperties.body != 'undefined' && this.curlProperties.body) {\n            body = `\\n.body(${this.curlProperties.body})`;\n        }\n        return body;\n    }\n    \n}","import CurlverterCore from './curlverter.core'\n\nexport default class KarateRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `${this.mountUrl()}${this.mountHeader()}${this.mountBody()}${this.mountMethod()}\\n Then status <status-code>`\n    }\n\n    mountUrl() {\n        let givenUrl: string = \"\";\n        if (this.curlProperties.url) {\n            givenUrl = ` Given url '${this.curlProperties.url}'`\n        }\n        return givenUrl;\n    }\n\n    mountBody() {\n        let andRequest: string = \"\";\n        if (this.curlProperties.body) {\n            andRequest = `\\n And request ${this.curlProperties.body}`;\n        }\n        return andRequest;\n    }\n\n    mountHeader() {\n        let andHeader = \"\";\n        this.curlProperties.headers.forEach( element  => {\n            andHeader += `\\n And header ${element.name.trim()} = \"${element.value.trim()}\"`\n        })\n        return andHeader;\n    }\n\n    mountMethod() {\n        let method: string = \"\"\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `When method get`;\n                break;\n            case \"POST\": \n                method = `When method post`;\n                break;\n            case \"PUT\": \n                method = `When method put`;\n                break;\n            case \"DELETE\": \n                method = `When method delete`;\n                break;\n        }\n        return \"\\n \"+method;\n    }\n}","import React, {Component} from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {Container, Box, FormControl, InputLabel, MenuItem, Button} from '@material-ui/core';\nimport {FileCopyOutlined} from '@material-ui/icons';\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport {Select, TextField} from 'formik-material-ui'\n//rules\nimport RestAssuredRule from '../../rules/restassured.rule';\nimport KarateRule from '../../rules/karate.rule'\n\nexport interface IFormState {\n    frameworks: string;\n    curlCommand: string;\n    snippet: string;\n    language: string;\n}\n\nexport interface IFormProps { }\n\nclass MyForm extends Component<IFormProps, IFormState> {\n\n  handleSubmit({ frameworks, curlCommand }: IFormState, { setSubmitting }: FormikHelpers<IFormState>) {\n    if (frameworks === \"restassured\") {\n      const restassuredRule = new RestAssuredRule(curlCommand);\n      this.setState({ snippet: restassuredRule.mountSnippet(), language: \"java\"})\n    } \n    else if( frameworks === \"karate\" ) {\n      const karateRule = new KarateRule(curlCommand);\n      this.setState({ snippet: karateRule.mountSnippet(), language: \"gherkin\" })\n    }\n    else if (frameworks === \"cypress\") {\n      alert(\"cypress: Work in progress\")\n    } \n    setSubmitting(false);\n  }\n\n  constructor(props: IFormProps) {\n    super(props);\n    this.state = {frameworks: \"\", curlCommand: \"\", snippet: \"\", language: \"\"};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  curlFieldValidation(value: string) {\n    let error: string = \"\";\n    if (!value) {\n      error = \"Empty field\"\n    } else if (!value.includes(\"curl\")) {\n      error = \"Invalid curl command\";\n    }\n    return error;\n  }\n\n  frameworksFieldValidation(value: string) {\n    let error: string = \"\";\n    if (!value) {\n      error = \"First, choose your framework\"\n    }\n    return error;\n  }\n\n  render() {\n      return (\n          <div>\n              <Container maxWidth=\"lg\">\n                  <Formik\n                    initialValues={{\n                      frameworks: '',\n                      curlCommand: '',\n                      snippet: '',\n                      language: ''\n                    }}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({errors, touched, isValidating}) => (\n                        <Form>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <InputLabel shrink={true} htmlFor=\"framework\">Choose your framework</InputLabel>\n                            <Field \n                              component={Select} \n                              type=\"text\"\n                              name=\"frameworks\" \n                              inputProps={{name: 'frameworks', id: 'frameworks'}}\n                              validate={this.frameworksFieldValidation}\n                            >\n                              <MenuItem value=\"restassured\">RestAssured</MenuItem>\n                              <MenuItem value=\"karate\">Karate/DSL</MenuItem>\n                              <MenuItem value=\"cypress\">Cypress</MenuItem>\n                            </Field>\n                            <div className=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\">{errors.frameworks}</div>\n                          </FormControl>\n                        </Box>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <Field\n                              component={TextField}\n                              type=\"text\"\n                              label=\"cURL\"\n                              variant=\"outlined\"\n                              multiline\n                              rows={4}\n                              placeholder=\"Insert your curl command\"\n                              name=\"curlCommand\"\n                              validate={this.curlFieldValidation}\n                            />\n                          </FormControl>\n                        </Box>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                              CURLVERT\n                            </Button>\n                          </FormControl>\n                        </Box>\n                      </Form>\n                    )}\n                  </Formik>\n              </Container>\n              <Container maxWidth=\"md\">\n                <Box margin={4}>\n                  {this.state.snippet ? \n                    <SyntaxHighlighter showLineNumbers language={this.state.language} style={atomDark}>\n                      {this.state.snippet}\n                    </SyntaxHighlighter>\n                    : \n                    null\n                  }\n                  {this.state.snippet ?\n                    <CopyToClipboard text={this.state.snippet}>\n                      <Button  startIcon={<FileCopyOutlined />} variant=\"outlined\">Copy to clipboard</Button>\n                    </CopyToClipboard>\n                    : \n                    null\n                  }\n                </Box>\n              </Container>\n          </div>\n      )\n  }\n}\n\nexport default MyForm;","import React, { Component } from 'react';\n//elements\nimport Header from '../../elements/Header';\nimport MyForm from '../../elements/MyForm';\n\nimport './styles.css'\n\nclass Home extends Component {\n  render(){\n    return (\n      <div>\n        <Header />\n        <MyForm />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nimport Home from './pages/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <Home />\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__3FbFt\"};"],"sourceRoot":""}
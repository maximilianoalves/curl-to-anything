{"version":3,"sources":["elements/Header/index.tsx","rules/curlverter.core.ts","rules/restassured.rule.ts","rules/karate.rule.ts","rules/httparty.rule.ts","rules/supertest.rule.ts","elements/CurlvertForm/index.tsx","pages/Home/index.tsx","App.tsx","rules/schema.core.ts","elements/SchemaJsonForm/index.tsx","pages/SchemaJSON/index.tsx","index.tsx","elements/Header/styles.module.css"],"names":["Header","AppBar","position","Toolbar","Typography","variant","className","styles","title","Link","color","href","Button","Component","CurlverterCore","curl","url","method","body","headers","this","converter","includes","split","forEach","value","headerValues","push","name","bodySplited","createUrl","requestSplited","urlSplited","URL","RestAssuredRule","curlProperties","mountHeaders","mountBody","mountQueryParams","mountUrl","queryParamsRestAssured","queryParams","searchParams","params","toString","length","param","paramSplited","substring","indexOf","headerSnippet","element","trim","KarateRule","mountHeader","mountMethod","givenUrl","andRequest","andHeader","HttpartyRule","index","bodyTrimmed","replace","join","SupertestRule","setBody","host","pathname","CurlvertForm","props","state","frameworks","curlCommand","snippet","language","open","handleSubmit","bind","setSubmitting","restassuredRule","setState","mountSnippet","karateRule","httpartyRule","supertestRule","alert","error","toast","success","Container","maxWidth","initialValues","onSubmit","errors","touched","isValidating","Box","margin","FormControl","fullWidth","InputLabel","shrink","htmlFor","component","Select","type","inputProps","id","validate","frameworksFieldValidation","MenuItem","TextField","label","multiline","rows","placeholder","curlFieldValidation","lineProps","style","wordBreak","whiteSpace","showLineNumbers","wrapLines","atomDark","text","onCopy","onCopyText","startIcon","FileCopyOutlined","Home","App","Schema","jsonObject","JSON","parse","jsonSchema","toJsonSchema","required","stringify","SchemaJsonForm","schema","mountSchema","jsonObjectFieldValidation","SchemaJSON","ReactDOM","render","path","exact","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.89c731be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { AppBar, Button, Link, Toolbar, Typography } from '@material-ui/core';\nimport styles from './styles.module.css';\n\nclass Header extends Component {\n\n\n    render() {\n        return (\n            <AppBar position=\"static\">\n                <Toolbar >\n                    <Typography variant=\"h4\" className={styles.title}>\n                        <Link color=\"inherit\" href=\"/curl-to-anything\" >cURL to Anything</Link>\n                    </Typography>\n                    <Button color=\"inherit\" href=\"/curl-to-anything/#/schema-json\">Schema JSON</Button>\n                </Toolbar>\n          </AppBar>\n        )\n    }\n}\n\nexport default Header;","/**\n * Implements the main features to generate snippets for each language\n */\n\nexport default class CurlverterCore {\n\n    curl: string;\n    url?: URL;\n    method?: string;\n    body: string\n    headers: {name: string, value: string }[]\n\n    constructor(curl: string) {\n        this.curl = curl;\n        this.headers = [];\n        this.body = \"\";\n        this.converter()\n    }\n\n    converter() {\n        if (this.curl.includes(\"--\")) {\n            let curlSplited = this.curl.split(\"--\");\n            curlSplited.forEach( (value) => {\n                if (value.includes(\"header\")) {\n                    let header = value.split(\"'\");\n                    let headerValues: string[] = header[1].split(\":\");\n                    this.headers.push({name: headerValues[0], value: headerValues[1]})\n                }\n                if (value.includes(\"data-raw\")) {\n                    let bodySplited = value.split(\"'\");\n                    this.body = bodySplited[1];\n                }\n                if (value.includes(\"request\")) {\n                    this.createUrl(value)\n                }\n            })\n        } else {\n            let curlSplited = this.curl.split(\" -\");\n            curlSplited.forEach( (value) => {\n                if (value.includes(\"H\")) {\n                    let header = value.split(\"\\\"\");\n                    let headerValues: string[] = header[1].split(\":\");\n                    this.headers.push({name: headerValues[0], value: headerValues[1]})\n                }\n                if (value.includes(\"d\")) {\n                    let bodySplited = value.split(\" \\\"\");\n                    this.body = bodySplited[1];\n                }\n                if (value.includes(\"X\")) {\n                    this.createUrl(value)\n                }\n            })\n        }\n        \n    }\n\n    createUrl(value: String) {\n        let requestSplited = value.split(\" \");\n        this.method = requestSplited[1];\n        let urlSplited = requestSplited[2].split(\"'\")\n        this.url = new URL(urlSplited[1]);\n    }\n}","import CurlverterCore from './curlverter.core'\n\nexport default class RestAssuredRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `given()${this.mountHeaders()}${this.mountBody()}\\n${this.mountQueryParams()}.when()${this.mountUrl()}\\n.then()`\n    }\n\n    mountQueryParams() {\n        let queryParamsRestAssured = \"\";\n        let queryParams = this.curlProperties.url?.searchParams ?? \"\";\n        let params = queryParams?.toString().split(\"&\")\n        if (queryParams?.toString().length > 0) {\n            params?.forEach(param => {\n                let paramSplited = param.split(\"=\");\n                queryParamsRestAssured += `.queryParam(\"${paramSplited[0]}\", \"${paramSplited[1]}\")\\n`\n            });\n        }\n        return queryParamsRestAssured;\n    }\n\n    mountUrl() {\n        let method: string = \"\"\n        let url = this.curlProperties.url?.toString().substring(0, this.curlProperties.url.toString().indexOf(\"?\"))\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `.get(\"${url}\")`;\n                break;\n            case \"POST\": \n                method = `.post(\"${url}\")`;\n                break;\n            case \"PUT\": \n                method = `.put(\"${url}\")`;\n                break;\n            case \"DELETE\": \n                method = `.delete(\"${url}\")`;\n                break;\n        }\n        return \"\\n\" + method;\n    }\n\n    mountHeaders() {\n        let headerSnippet: string = \"\";\n        this.curlProperties.headers.forEach( element  => {\n            headerSnippet += `\\n.header(\"${element.name.trim()}\", \"${element.value.trim()}\")`\n        })\n        return headerSnippet;\n    }\n\n    mountBody() {\n        let body: string = \"\"\n        if (typeof this.curlProperties.body != 'undefined' && this.curlProperties.body && this.curlProperties.method !== 'GET') {\n            body = `\\n.body(${this.curlProperties.body})`;\n        }\n        return body;\n    }\n    \n}","import CurlverterCore from './curlverter.core'\n\nexport default class KarateRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `${this.mountUrl()}${this.mountHeader()}${this.mountBody()}${this.mountMethod()}\\n Then status <status-code>`\n    }\n\n    mountUrl() {\n        let givenUrl: string = \"\";\n        if (this.curlProperties.url) {\n            givenUrl = ` Given url '${this.curlProperties.url}'`\n        }\n        return givenUrl;\n    }\n\n    mountBody() {\n        let andRequest: string = \"\";\n        if (this.curlProperties.body && this.curlProperties.method !== 'GET') {\n            andRequest = `\\n And request ${this.curlProperties.body}`;\n        }\n        return andRequest;\n    }\n\n    mountHeader() {\n        let andHeader = \"\";\n        this.curlProperties.headers.forEach( element  => {\n            andHeader += `\\n And header ${element.name.trim()} = \"${element.value.trim()}\"`\n        })\n        return andHeader;\n    }\n\n    mountMethod() {\n        let method: string = \"\"\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `When method get`;\n                break;\n            case \"POST\": \n                method = `When method post`;\n                break;\n            case \"PUT\": \n                method = `When method put`;\n                break;\n            case \"DELETE\": \n                method = `When method delete`;\n                break;\n        }\n        return \"\\n \"+method;\n    }\n}","import CurlverterCore from './curlverter.core'\n\nexport default class HttpartyRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `HTTParty.${this.mountUrl()}${this.mountHeaders()}${this.mountBody()})`\n    }\n\n    mountUrl() {\n        let method: string = \"\"\n        let url = this.curlProperties.url\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `get('${url}', `;\n                break;\n            case \"POST\": \n                method = `post('${url}', `;\n                break;\n            case \"PUT\": \n                method = `put('${url}', `;\n                break;\n            case \"DELETE\": \n                method = `delete('${url}', `;\n                break;\n        }\n        return method;\n    }\n\n    mountHeaders() {\n        if(this.curlProperties.headers.length > 0) {\n            let headerSnippet: string = \" :headers => {\";\n            this.curlProperties.headers.forEach((element, index) => {\n                if (index === this.curlProperties.headers.length -1) {\n                    headerSnippet += `'${element.name.trim()}': '${element.value.trim()}' `\n                } else {\n                    headerSnippet += `'${element.name.trim()}': '${element.value.trim()}', `\n                }\n            })\n            headerSnippet += \"}, \";\n            return headerSnippet;\n        } else {\n            return \"\"\n        }\n    }\n\n    mountBody() {\n        let body: string = \"\"\n        if (typeof this.curlProperties.body != 'undefined' && this.curlProperties.body && this.curlProperties.method !== 'GET') {\n            const bodyTrimmed = this.curlProperties.body.replace(/\\s+/g, '')\n            body = `, :body => ${bodyTrimmed.split('\\n').join(\"\")}.to_json`;\n        }\n        return body;\n    }\n}","import CurlverterCore from './curlverter.core'\n\nexport default class SupertestRule {\n\n    curlProperties: CurlverterCore;\n\n    constructor(curl: string) {\n        this.curlProperties = new CurlverterCore(curl);\n    }\n\n    mountSnippet() {\n        return `${this.mountBody()}${this.mountUrl()}${this.setBody()}${this.mountHeaders()}`\n    }\n\n    mountUrl() {\n        let method: string = \"\"\n        let url = this.curlProperties.url?.host\n        let pathname = this.curlProperties.url?.pathname\n        switch(this.curlProperties.method) {\n            case 'GET': \n                method = `supertest(\"${url}\").get(\"${pathname}\")`;\n                break;\n            case \"POST\": \n                method = `supertest(\"${url}\").post(\"${pathname}\")`;\n                break;\n            case \"PUT\": \n                method = `supertest(\"${url}\").put(\"${pathname}\")`;\n                break;\n            case \"DELETE\": \n                method = `supertest(\"${url}\").delete(\"${pathname}\")`;\n                break;\n        }\n        return method;\n    }\n\n    mountHeaders() {\n        let headerSnippet: string = \"\";\n        this.curlProperties.headers.forEach( element  => {\n            headerSnippet += `.set(\"${element.name.trim()}\", \"${element.value.trim()}\")`\n        })\n        return headerSnippet;\n    }\n\n    mountBody() {\n        let body: string = \"\"\n        if (typeof this.curlProperties.body != 'undefined' && this.curlProperties.body && this.curlProperties.method !== 'GET') {\n            body = `let body = ${this.curlProperties.body}\\n\\n`;\n        }\n        return body;\n    }\n\n    setBody() {\n        let body: string = \"\"\n        if (typeof this.curlProperties.body != 'undefined' && this.curlProperties.body && this.curlProperties.method !== 'GET') {\n            body = `.send(body)`;\n        }\n        return body;\n    }\n}","import React, {Component} from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {Container, Box, FormControl, InputLabel, MenuItem, Button} from '@material-ui/core';\nimport {FileCopyOutlined} from '@material-ui/icons';\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport {Select, TextField} from 'formik-material-ui'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n//rules\nimport RestAssuredRule from '../../rules/restassured.rule';\nimport KarateRule from '../../rules/karate.rule'\nimport HttpartyRule from '../../rules/httparty.rule';\nimport SupertestRule from '../../rules/supertest.rule';\n\nexport interface IFormState {\n    frameworks: string;\n    curlCommand: string;\n    snippet: string;\n    open: boolean;\n    language: string;\n}\n\nexport interface IFormProps { }\n\nclass CurlvertForm extends Component<IFormProps, IFormState> {\n\n  handleSubmit({ frameworks, curlCommand }: IFormState, { setSubmitting }: FormikHelpers<IFormState>) {\n    switch(frameworks) {\n      case \"restassured\": {\n        const restassuredRule = new RestAssuredRule(curlCommand);\n        this.setState({ snippet: restassuredRule.mountSnippet(), language: \"java\"})\n        break\n      }\n      case \"karate\": {\n        const karateRule = new KarateRule(curlCommand);\n        this.setState({ snippet: karateRule.mountSnippet(), language: \"gherkin\" })\n        break\n      }\n      case \"httparty\": {\n        const httpartyRule = new HttpartyRule(curlCommand);\n        this.setState({ snippet: httpartyRule.mountSnippet(), language: \"ruby\" })\n        break\n      }\n      case \"supertest\": {\n        const supertestRule = new SupertestRule(curlCommand);\n        this.setState({ snippet: supertestRule.mountSnippet(), language: \"javascript\" })\n        break\n      }\n      default: {\n        alert(\"Work in progress\")\n      }\n    }\n    setSubmitting(false);\n  }\n\n  constructor(props: IFormProps) {\n    super(props);\n    this.state = {frameworks: \"\", curlCommand: \"\", snippet: \"\", language: \"\", open: false};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  curlFieldValidation(value: string) {\n    let error: string = \"\";\n    if (!value) {\n      error = \"Empty field\"\n    } else if (!value.includes(\"curl\")) {\n      error = \"Invalid curl command\";\n    }\n    return error;\n  }\n\n  frameworksFieldValidation(value: string) {\n    let error: string = \"\";\n    if (!value) {\n      error = \"First, choose your framework\"\n    }\n    return error;\n  }\n\n  onCopyText() {\n    toast.success(\"Text copied!\");\n  }\n\n  render() {\n      return (\n          <div>\n              <Container maxWidth=\"lg\">\n                  <Formik\n                    initialValues={{\n                      frameworks: '',\n                      curlCommand: '',\n                      snippet: '',\n                      open: false,\n                      language: ''\n                    }}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({errors, touched, isValidating}) => (\n                        <Form>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <InputLabel shrink={true} htmlFor=\"framework\">Choose your framework</InputLabel>\n                            <Field \n                              component={Select} \n                              type=\"text\"\n                              name=\"frameworks\" \n                              inputProps={{name: 'frameworks', id: 'frameworks'}}\n                              validate={this.frameworksFieldValidation}\n                            >\n                              <MenuItem value=\"restassured\">RestAssured</MenuItem>\n                              <MenuItem value=\"karate\">Karate/DSL</MenuItem>\n                              <MenuItem value=\"httparty\">Httparty</MenuItem>\n                              <MenuItem value=\"supertest\">SuperTest</MenuItem>\n                            </Field>\n                            <div className=\"MuiFormHelperText-root MuiFormHelperText-contained Mui-error\">{errors.frameworks}</div>\n                          </FormControl>\n                        </Box>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <Field\n                              component={TextField}\n                              type=\"text\"\n                              label=\"cURL\"\n                              variant=\"outlined\"\n                              multiline\n                              rows={4}\n                              placeholder=\"Insert your curl command\"\n                              name=\"curlCommand\"\n                              validate={this.curlFieldValidation}\n                            />\n                          </FormControl>\n                        </Box>\n                        <Box margin={2}>\n                          <FormControl fullWidth>\n                            <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                              CURLVERT\n                            </Button>\n                          </FormControl>\n                        </Box>\n                      </Form>\n                    )}\n                  </Formik>\n              </Container>\n              <Container maxWidth=\"md\">\n                <Box margin={4}>\n                  {this.state.snippet ? \n                    <SyntaxHighlighter \n                      lineProps={{style: {wordBreak: 'break-all', whiteSpace: 'pre-wrap'}}}\n                      showLineNumbers \n                      wrapLines={true} \n                      language={this.state.language} \n                      style={atomDark}>\n                      {this.state.snippet}\n                    </SyntaxHighlighter>\n                    : \n                    null\n                  }\n                  {this.state.snippet ?\n                    <CopyToClipboard text={this.state.snippet} onCopy={() => this.onCopyText()}>\n                      <Button  startIcon={<FileCopyOutlined />} variant=\"outlined\">Copy to clipboard</Button>\n                    </CopyToClipboard>\n                    : \n                    null\n                  }\n                  <ToastContainer />\n                </Box>\n              </Container>\n          </div>\n      )\n  }\n}\n\nexport default CurlvertForm;","import React, { Component } from 'react';\n//elements\nimport Header from '../../elements/Header';\n\nimport './styles.css'\nimport CurlvertForm from '../../elements/CurlvertForm';\n\nclass Home extends Component {\n\n  render(){\n    return (\n      <div>\n        <Header />\n        <CurlvertForm />\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\nimport Home from './pages/Home'\n\nclass App extends Component {\n  render() {\n    return (\n      <Home />\n    );\n  }\n}\n\nexport default App;","import toJsonSchema from 'to-json-schema'\n\nexport default class Schema {\n\n    jsonObject: Object;\n\n    constructor(jsonObject: string) {\n        this.jsonObject = JSON.parse(jsonObject);\n    }\n\n    mountSchema() {\n        const jsonSchema = toJsonSchema(this.jsonObject, {required: true})\n        return JSON.stringify(jsonSchema, null, 2);\n    }\n}","import React, {Component} from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {Container, Box, FormControl, Button} from '@material-ui/core';\nimport {FileCopyOutlined} from '@material-ui/icons';\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport {TextField} from 'formik-material-ui'\nimport Schema from '../../rules/schema.core';\n\nexport interface IFormState {\n    frameworks: string;\n    jsonObject: string;\n    snippet: string;\n    language: string;\n}\n\nexport interface IFormProps { }\n\nclass SchemaJsonForm extends Component<IFormProps, IFormState> {\n\n  handleSubmit({ jsonObject }: IFormState, { setSubmitting }: FormikHelpers<IFormState>) {\n    const schema = new Schema(jsonObject);\n    this.setState({ snippet: schema.mountSchema(), language: \"json\" })\n    setSubmitting(false);\n  }\n\n  constructor(props: IFormProps) {\n    super(props);\n    this.state = {frameworks: \"\", jsonObject: \"\", snippet: \"\", language: \"\"};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  jsonObjectFieldValidation(value: string) {\n    let error: string = \"\";\n    if (!value) {\n      error = \"Empty field\"\n    }\n    return error;\n  }\n\n  render() {\n      return (\n          <div>\n              <Container maxWidth=\"lg\">\n                  <Formik\n                    initialValues={{\n                      frameworks: '',\n                      jsonObject: '',\n                      snippet: '',\n                      language: ''\n                    }}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({errors, touched, isValidating}) => (\n                        <Form>\n                          <Box margin={2}>\n                            <FormControl fullWidth>\n                              <Field\n                                component={TextField}\n                                type=\"text\"\n                                label=\"JSON Object\"\n                                variant=\"outlined\"\n                                multiline\n                                rows={4}\n                                placeholder=\"Insert your json object\"\n                                name=\"jsonObject\"\n                                validate={this.jsonObjectFieldValidation}\n                              />\n                            </FormControl>\n                          </Box>\n                          <Box margin={2}>\n                            <FormControl fullWidth>\n                              <Button variant=\"contained\" type=\"submit\" color=\"primary\">\n                                Get JSON Schema\n                              </Button>\n                            </FormControl>\n                          </Box>\n                      </Form>\n                    )}\n                  </Formik>\n              </Container>\n              <Container maxWidth=\"md\">\n                <Box margin={4}>\n                  {this.state.snippet ? \n                    <SyntaxHighlighter \n                      lineProps={{style: {wordBreak: 'break-all', whiteSpace: 'pre-wrap'}}}\n                      showLineNumbers \n                      wrapLines={true} \n                      language={this.state.language} \n                      style={atomDark}>\n                      {this.state.snippet}\n                    </SyntaxHighlighter>\n                    : \n                    null\n                  }\n                  {this.state.snippet ?\n                    <CopyToClipboard text={this.state.snippet}>\n                      <Button  startIcon={<FileCopyOutlined />} variant=\"outlined\">Copy to clipboard</Button>\n                    </CopyToClipboard>\n                    : \n                    null\n                  }\n                </Box>\n              </Container>\n          </div>\n      )\n  }\n}\n\nexport default SchemaJsonForm;","import React, { Component } from 'react';\n//elements\nimport Header from '../../elements/Header';\nimport SchemaJsonForm from '../../elements/SchemaJsonForm';\n\nimport './styles.css'\n\n\nclass SchemaJSON extends Component {\n  render(){\n    return (\n      <div>\n        <Header />\n        <SchemaJsonForm />\n      </div>\n    );\n  }\n}\n\nexport default SchemaJSON;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport SchemaJSON from './pages/SchemaJSON';\nimport { HashRouter, Route } from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter>\n        <Route path={[\"/\", \"/curl-to-anything\"]} exact={true} component={App} />\n        <Route path=\"/schema-json\" component={SchemaJSON} />\n    </HashRouter>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"styles_title__3FbFt\"};"],"sourceRoot":""}